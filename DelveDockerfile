FROM golang:1.14 AS delve
WORKDIR /delve
COPY ./delve/go.mod ./
COPY ./delve/go.sum ./
RUN go mod download
ADD ./delve .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o dlv -ldflags "-s" ./cmd/dlv

FROM golang:1.14 AS build
WORKDIR /kong-ingress-controller
COPY go.mod ./
COPY go.sum ./
RUN go mod download
ADD . .
ARG TAG
ARG REPO_INFO
ARG COMMIT
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o kong-ingress-controller -gcflags=all="-N -l" -ldflags "-X main.RELEASE=$TAG -X main.COMMIT=$COMMIT -X main.REPO=$REPO_INFO" ./cli/ingress-controller

# Final stage: the running container.
FROM alpine:3.11
RUN apk --no-cache add ca-certificates

# Create the user (ID 1000) and group that will be used in the
# running container to run the process as an unprivileged user.
RUN addgroup -S kic && \
    adduser -S kic -G kic -u 1000

# Import the compiled executable from the second stage.
COPY --from=build /kong-ingress-controller/kong-ingress-controller /bin
COPY --from=delve /delve/dlv /bin
# Only for backwards compatibility
COPY --from=build /kong-ingress-controller/kong-ingress-controller .

# Perform any further action as an unprivileged user.
USER 1000

# Run the compiled binary.
#ENTRYPOINT ["/kong-ingress-controller"]
EXPOSE 2345

CMD ["dlv", "exec", "--headless", "--api-version=2", "--listen=:2345", "--log", "/kong-ingress-controller"]
